#+title: GNU Emacs Configuration
#+author: Jacopo Costantini
#+language: en
#+options: ':t toc:nil author:t num:t
#+startup: content indent

* Early Init

#+begin_src elisp :tangle ~/.emacs.d/early-init.el
  ;;; early-init.el --- Emacs Minimal Config ;; -*- lexical-binding: t; -*-

  ;;; Commentary:

  ;;; Code:
  (defconst *is-a-mac* (eq system-type 'darwin))
  (defconst *rvm-installed* (and (file-directory-p "~/.rvm")
                                 (file-executable-p "~/.rvm/bin/rvm")))

  (setq package-enable-at-startup nil)

  ;; PERF: A second, case-insensitive pass over `auto-mode-alist' is time wasted.
  (setq auto-mode-case-fold nil)

  ;; PERF: Disable bidirectional text scanning for a modest performance boost.
  ;;   I've set this to `nil' in the past, but the `bidi-display-reordering's docs
  ;;   say that is an undefined state and suggest this to be just as good:
  (setq-default bidi-display-reordering 'left-to-right
                bidi-paragraph-direction 'left-to-right)

  ;; PERF: Disabling BPA makes redisplay faster, but might produce incorrect
  ;;   reordering of bidirectional text with embedded parentheses (and other
  ;;   bracket characters whose 'paired-bracket' Unicode property is non-nil).
  (setq bidi-inhibit-bpa t)  ; Emacs 27+ only

  ;; Reduce rendering/line scan work for Emacs by not rendering cursors or regions
  ;; in non-focused windows.
  (setq-default cursor-in-non-selected-windows nil)
  (setq highlight-nonselected-windows nil)

  ;; More performant rapid scrolling over unfontified regions. May cause brief
  ;; spells of inaccurate syntax highlighting right after scrolling, which should
  ;; quickly self-correct.
  (setq fast-but-imprecise-scrolling t)

  ;; Don't ping things that look like domain names.
  (setq ffap-machine-p-known 'reject)

  ;; Emacs "updates" its ui more often than it needs to, so slow it down slightly
  (setq idle-update-delay 1.0)  ; default is 0.5

  ;; Font compacting can be terribly expensive, especially for rendering icon
  ;; fonts on Windows. Whether disabling it has a notable affect on Linux and Mac
  ;; hasn't been determined, but do it anyway, just in case. This increases memory
  ;; usage, however!
  (setq inhibit-compacting-font-caches t)

  ;; Increase how much is read from processes in a single chunk (default is 4kb).
  ;; This is further increased elsewhere, where needed (like our LSP module).
  (setq read-process-output-max (* 2 1024 1024)) ; 2 MiB

  ;; Introduced in Emacs HEAD (b2f8c9f), this inhibits fontification while
  ;; receiving input, which should help a little with scrolling performance.
  (setq redisplay-skip-fontification-on-input t)

  ;;; Disable UI elements early
  ;; PERF,UI: Doom strives to be keyboard-centric, so I consider these UI elements
  ;;   clutter. Initializing them also costs a morsel of startup time. Whats more,
  ;;   the menu bar exposes functionality that Doom doesn't endorse. Perhaps one
  ;;   day Doom will support these, but today is not that day.
  ;;
  ;; HACK: I intentionally avoid calling `menu-bar-mode', `tool-bar-mode', and
  ;;   `scroll-bar-mode' because they do extra work to manipulate frame variables
  ;;   that isn't necessary this early in the startup process.
  (push '(menu-bar-lines . 0)   default-frame-alist)
  (push '(tool-bar-lines . 0)   default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)

  ;; And set these to nil so users don't have to toggle the modes twice to
  ;; reactivate them.
  (setq menu-bar-mode nil
        tool-bar-mode nil
        scroll-bar-mode nil)

  ;; FIX: On MacOS, disabling the menu bar makes MacOS treat Emacs as a
  ;;   non-application window -- which means it doesn't automatically capture
  ;;   focus when it is started, among other things, so enable the menu-bar for
  ;;   GUI frames, but keep it disabled in terminal frames because there it
  ;;   activates an ugly, in-frame menu bar.
  (when *is-a-mac*
    (add-hook 'window-setup-hook 'doom-restore-menu-bar-in-gui-frames-h)
    (add-hook 'after-make-frame-functions 'doom-restore-menu-bar-in-gui-frames-h)
    (defun doom-restore-menu-bar-in-gui-frames-h (&optional frame)
      (let ((use-frame (or frame (selected-frame))))
        (when (display-graphic-p use-frame)
          (set-frame-parameter use-frame 'menu-bar-lines 1)))))

  (setq frame-resize-pixelwise t
        frame-inhibit-implied-resize t
        frame-title-format '("%b")
        ring-bell-function 'ignore
        use-dialog-box t ; only for mouse events, which I seldom use
        use-file-dialog nil
        use-short-answers t
        inhibit-splash-screen t
        inhibit-startup-screen t
        inhibit-x-resources t
        inhibit-startup-echo-area-message user-login-name ; read the docstring
        inhibit-startup-buffer-menu t)

  (setq default-input-method nil)
  (global-so-long-mode 1)

  (define-advice load-file (:override (file) silence)
    (load file nil 'nomessage))

  (setq window-resize-pixelwise t
        initial-scratch-message ";; Happy Hacking\n\n")

  ;; Reduce the frequency of garbage collection
  (setq gc-cons-threshold (* 1024 1024 80))

  (add-hook 'after-init-hook
            (lambda ()
              ;; Restore after startup
              (setq gc-cons-threshold 800000)
              (setq gc-cons-percentage 0.1)))

  (provide 'early-init)
  ;;; early-init.el ends here
#+end_src

* Init

#+begin_src elisp :tangle ~/.emacs.d/init.el
  ;;; init.el --- Emacs Minimal Config ;; -*- lexical-binding: t; -*-

  ;;; Commentary:

  ;;; Code:

  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)

  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))

  ;; Bootstrap `use-package`
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))
  (setq use-package-always-ensure t
        use-package-always-defer t)

  ;; Set up custom file
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))

  ;; Completions
  (require 'init-ido)
  (require 'init-evil)
  (require 'init-company)

  ;; UI & UX
  (require 'init-defaults)
  (require 'init-themes)

  ;; Projects related
  (require 'init-projectile)
  (require 'init-git)

  ;; Org stuff
  (require 'init-org)

  ;; LANGS
  (require 'init-langs)

  ;; MISC
  (require 'init-misc)

  (provide 'init)
  ;;; init.el ends here
#+end_src

** IDO

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-ido.el
  ;;; init-ido.el --- Ido Configuration ;; -*- lexical-binding: t; -*-

  ;;; Commentary:

  ;;; Code:

  (use-package ido
    :config
    (setq ido-everywhere t
          ido-virtual-buffers t
          ido-use-virtual-buffers t
          ido-max-prospects 10
          ido-use-faces t
          ido-create-new-buffer 'always
          ido-default-file-method 'selected-window
          ido-default-buffer-method 'selected-window
          ido-ignore-buffers '("\\` " "^\*Mess" "^\*Back" ".*Completion" "^\*Ido")
          ido-enable-flex-matching t)
    (ido-mode))

  (use-package ido-completing-read+
    :after ido
    :config
    (ido-ubiquitous-mode 1))

  ;; Smex
  (use-package smex
    :bind (("M-x" . smex)
           ("M-X" . smex-major-mode-commands)
           ;; This is your old M-x.
           ("C-c C-c M-x" . execute-extended-command)))

  (provide 'init-ido)
  ;;; init-ido.el ends here
#+end_src

** Evil

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-evil.el
    ;;; init-evil.el --- Using VIM bindings ;; -*- lexical-bindings: t; -*-
    ;;; Commentary:
    ;;; Code:

  (use-package evil
    :demand t
    :init
    (setq evil-want-integration t
          evil-undo-system 'undo-redo
          evil-split-window-below t
          evil-vsplit-window-right t
          evil-regexp-search t
          evil-search-wrap t
          evil-want-keybinding nil)
    :config
    (with-eval-after-load 'evil-maps
      (define-key evil-motion-state-map (kbd "SPC") nil)
      (define-key evil-motion-state-map (kbd "RET") nil)
      (define-key evil-motion-state-map (kbd "TAB") nil))
    (evil-mode +1))

  (use-package evil-collection
    :demand t
    :config
    (evil-collection-init))

  (use-package evil-tutor)

  (use-package general
    :demand t
    :config
    (general-evil-setup t)

    (general-create-definer mp/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "M-SPC") ;; to use in insert mode

    (mp/leader-keys
      "SPC"     '(smex :wk "SMEX")
      ","       '(switch-to-buffer :wk "Switch buffer")
      "."       '(find-file :wk "Find File")
      "TAB TAB" '(comment-line :wk "Comment lines")
      "u"       '(universal-argument :wk "Universal argument"))

    (mp/leader-keys
      "b"       '(:ignore t :wk "Buffers/Bookmarks")
      "b b"     '(switch-to-buffer :wk "Switch to buffer")
      "b c"     '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
      "b C"     '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
      "b d"     '(bookmark-delete :wk "Delete bookmark")
      "b i"     '(ibuffer :wk "Ibuffer")
      "b k"     '(kill-current-buffer :wk "Kill current buffer")
      "b K"     '(kill-some-buffers :wk "Kill multiple buffers")
      "b l"     '(list-bookmarks :wk "List bookmarks")
      "b m"     '(bookmark-set :wk "Set bookmark")
      "b n"     '(next-buffer :wk "Next buffer")
      "b p"     '(previous-buffer :wk "Previous buffer")
      "b r"     '(revert-buffer :wk "Reload buffer")
      "b R"     '(rename-buffer :wk "Rename buffer")
      "b s"     '(basic-save-buffer :wk "Save buffer")
      "b S"     '(save-some-buffers :wk "Save multiple buffers")
      "b w"     '(bookmark-save :wk "Save current bookmarks to bookmark file"))

    (mp/leader-keys
      "s"      '(:ignore t :wk "Search")
      "s g"    '(grep :wk "Grep")
      "s d"    '(dictionary-search :wk "Search Dictionary")
      "s m"    '(man :wk "Man pages")
      "s w"    '(woman :wk "Similar to Man"))

    (mp/leader-keys
      "t"      '(:ignore t :wk "Toggle")
      "t l"    '(display-line-numbers-mode :wk "Toggle line numbers"))

    (mp/leader-keys
      "d"       '(:ignore t :wk "Dired")
      "d d"     '(dired :wk "Open dired")
      "d j"     '(dired-jump :wk "Dired jump to current"))

    (mp/leader-keys
      "e"       '(:ignore t :wk "Eshell/Evaluate")
      "e b"     '(eval-buffer :wk "Evaluate elisp in buffer")
      "e d"     '(eval-defun :wk "Evaluate defun containing or after point")
      "e e"     '(eval-expression :wk "Evaluate and elisp expression")
      "e l"     '(eval-last-sexp :wk "Evaluate elisp expression before point")
      "e r"     '(eval-region :wk "Evaluate elisp in region")
      "e R"     '(eww-reload :which-key "Reload current page in EWW")
      "e s"     '(eshell :which-key "Eshell")
      "e w"     '(eww :which-key "EWW emacs web wowser"))

    (mp/leader-keys
      "f" '(:ignore t :wk "Files")    
      "f c" '((lambda () (interactive)
                (find-file (concat user-emacs-directory "papo-config.org"))) 
              :wk "Open emacs papo-config.org")
      "f e" '((lambda () (interactive)
                (dired user-emacs-directory)) 
              :wk "Open user-emacs-directory in dired")
      "f d" '(find-grep-dired :wk "Search for string in files in DIR")
      ;; "f g" '(counsel-grep-or-swiper :wk "Search for string current file")
      "f i" '((lambda () (interactive)
                (find-file (concat user-emacs-directory "init.el"))) 
              :wk "Open emacs init.el")
      ;; "f j" '(counsel-file-jump :wk "Jump to a file below current directory")
      ;; "f l" '(counsel-locate :wk "Locate a file")
      ;; "f r" '(counsel-recentf :wk "Find recent files")
      "f u" '(sudo-edit-find-file :wk "Sudo find file")
      "f U" '(sudo-edit :wk "Sudo edit file"))

    (mp/leader-keys
      "g"       '(:ignore t :wk "Git")
      "g /"     '(magit-dispatch :wk "Magit dispatch")
      "g ."     '(magit-file-dispatch :wk "Magit file dispatch")
      "g b"     '(magit-branch-checkout :wk "Switch branch")

      "g c"     '(:ignore t :wk "Create")
      "g c b"   '(magit-branch-and-checkout :wk "Create branch and checkout")
      "g c c"   '(magit-commit-create :wk "Create commit")
      "g c f"   '(magit-commit-fixup :wk "Create fixup commit")
      "g C"     '(magit-clone :wk "Clone repo")

      "g f"     '(:ignore t :wk "Find")
      "g f c"   '(magit-show-commit :wk "Show commit")
      "g f f"   '(magit-find-file :wk "Magit find file")
      "g f g"   '(magit-find-git-config-file :wk "Find gitconfig file")
      "g F"     '(magit-fetch :wk "Git fetch")
      "g g"     '(magit-status :wk "Magit status")
      "g i"     '(magit-init :wk "Initialize git repo")
      "g l"     '(magit-log-buffer-file :wk "Magit buffer log")
      "g r"     '(vc-revert :wk "Git revert file")
      "g s"     '(magit-stage-file :wk "Git stage file")
      "g t"     '(git-timemachine :wk "Git time machine")
      "g u"     '(magit-stage-file :wk "Git unstage file"))

    (mp/leader-keys
      "p"      '(projectile-command-map :wk "Projectile"))

    (mp/leader-keys
      "h"      '(:ignore t :wk "Help")
      "h a"    '(apropos :wk "Apropose")
      "h b"    '(describe-bindings :wk "Describe bindings")
      "h c"    '(describe-char :wk "Describe char under cursor")
      "h e"    '(view-echo-area-messages :wk "View echo area messages")
      ;; "h f"    '(describe-function :wk "Describe Function")
      "h f"    '(helpful-callable :wk "Describe Function")
      "h F"    '(describe-face :wk "Describe Face")
      "h g"    '(describe-gnu-project :wk "Describe GNU Project")
      "h i"    '(info :wk "Info")
      "h I"    '(describe-input-method :wk "Describe Input Method")
      ;; "h k"    '(describe-key :wk "Describe key")
      "h k"    '(helpful-key :wk "Describe key")
      "h l"    '(view-lossage :wk "Display recent keystrokes and the commands run")
      "h L"    '(describe-language-environment :wk "Describe language environment")
      "h m"    '(describe-mode :wk "Describe mode")
      "h t"    '(load-theme :wk "Load theme")
      ;; "h v"    '(describe-variable :wk "Describe variable")
      "h v"    '(helpful-variable :wk "Describe variable")
      "h w"    '(where-is :wk "Prints keybinding for command if set")
      ;; "h x"    '(describe-command :wk "Display full documentation for command")
      "h x"    '(helpful-command :wk "Display full documentation for command")

      "h d"    '(:ignore t :wk "Emacs Documentation")
      "h d a"  '(about-emacs :wk "About Emacs")
      "h d d"  '(view-emacs-debugging :wk "View Emacs debugging")
      "h d f"  '(view-emacs-FAQ :wk "View Emacs FAQ")
      "h d m"  '(info-emacs-manual :wk "The Emacs Manual")
      "h d n"  '(view-emacs-news :wk "View Emacs News")
      "h d o"  '(describe-distribution :wk "How to obtain Emacs")
      "h d p"  '(view-emacs-problems :wk "View Emacs problems")
      "h d t"  '(view-emacs-todo :wk "View Emacs todo")
      "h d w"  '(describe-no-warranty :wk "Describe no wannanty")
      )

    (mp/leader-keys
      "w"      '(:ignore t :wk "Windows")

      ;; Window splits
      "w q"    '(evil-window-delete :wk "Close window")
      "w u"    '(delete-other-windows :wk "Unique window")
      "w n"    '(evil-window-new :wk "New window")
      "w s"    '(evil-window-split :wk "Horizontal split window")
      "w v"    '(evil-window-vsplit :wk "Vertical split window")

      ;; Window motions
      "w h"   '(evil-window-left :wk "Window left")
      "w j"   '(evil-window-down :wk "Window down")
      "w k"   '(evil-window-up :wk "Window up")
      "w l"   '(evil-window-right :wk "Window right")
      "w w"   '(evil-window-next :wk "Goto next window")

      ;; Move Windows
      "w H"   '(buf-move-left :wk "Buffer move left")
      "w J"   '(buf-move-down :wk "Buffer move down")
      "w K"   '(buf-move-up :wk "Buffer move up")
      "w L"   '(buf-move-right :wk "Buffer move right"))

    (mp/leader-keys
      "c"   '(:ignore t :wk "Code")
      "c a" '(eglot-code-actions :wk "Actions")
      "c o" '(eglot-code-action-organize-imports :wk "Organize imports")
      "c r" '(eglot-rename :wk "Rename")
      "c r" '(eglot-format :wk "Format")
      "c i" '(imenu :wk "imenu"))

    (mp/leader-keys
      "!"   '(:ignore t :wk "Flymake/Flycheck")
      "! n" '(flymake-goto-next-error :wk "Next error")
      "! p" '(flymake-goto-prev-error :wk "Prev error")
      "! l" '(flymake-show-buffer-diagnostics :wk "Diagnostics"))

    ;;,* Mode Keybindings
    (nmap
      :keymaps 'emacs-lisp-mode-map
      "K" 'elisp-slime-nav-describe-elisp-thing-at-point)

    (nmap
      :keymaps 'ruby-mode-map
      "." 'xref-find-definitions
      "," 'xref-go-back)
    )

  (provide 'init-evil)
    ;;; init-evil.el ends here
#+end_src
** Company

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-company.el
  ;;; init-company.el --- Company Configuration ;; -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:

  (use-package company
    :demand t
    :config
    (setq company-tooltip-align-annotations t
          company-selection-wrap-around t
          company-lighter-base "©"
          company-tooltip-limit 10
          company-idle-delay 0.1
          company-minimum-prefix-length 1
          ;; company-require-match 'never
          ;; company-format-margin-function 'company-text-icons-margin
          company-tooltip-minimum 4
          ;; company-text-face-extra-attributes '(:weight bold :slant italic)
          company-text-icons-add-background nil
          company-dabbrev-other-buffers nil
          company-dabbrev-ignore-case nil
          company-dabbrev-downcase nil
          company-tooltip-flip-when-above t
          ;; company-show-quick-access 'left
          company-frontends '(company-pseudo-tooltip-frontend
                              company-echo-metadata-frontend)
          company-files-exclusions '(".git/" ".DS_Store")
          ;; company-transformers '(delete-consecutive-dups
                                 ;; company-sort-by-occurrence)
          company-global-modes '(not erc-mode message-mode help-mode))
    (global-company-mode +1))

  (use-package company-prescient
    :demand t
    :config
    (company-prescient-mode +1))

  (provide 'init-company)
  ;;; init-company.el ends here
#+end_src

** Defaults

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-defaults.el
    ;;; init-defaults.el --- Better Emacs Defaults ;; -*- lexical-binding: t; -*-
    ;;; Commentary:
    ;;; Code:

    (use-package emacs
      :ensure nil
      :demand t
      :config
      (prefer-coding-system 'utf-8)
      (set-default-coding-systems 'utf-8)
      (set-terminal-coding-system 'utf-8)
      (set-keyboard-coding-system 'utf-8)

      (electric-pair-mode +1)
      (show-paren-mode +1)
      (global-hl-line-mode +1)
      (delete-selection-mode +1)
      (subword-mode +1)
      (save-place-mode +1)

      (setq display-time-day-and-date t
            display-time-24hr-format  t
            display-time-default-load-average nil)
      (display-time-mode +1)

      (setq global-auto-revert-non-file-buffers t
            auto-revert-verbose nil
            auto-revert-use-notify nil)
      (global-auto-revert-mode +1)

      (setq-default
       line-number-mode t
       column-number-mode t
       size-indication-mode t
       fill-column 80
       blink-cursor-interval 0.4
       bookmark-default-file (locate-user-emacs-file ".bookmarks.el")
       buffers-menu-max-size 30
       case-fold-search t
       load-prefer-newer t
       ediff-split-window-function 'split-window-horizontally
       ediff-window-setup-function 'ediff-setup-windows-plain
       indent-tabs-mode nil
       tab-width 4
       auto-save-default nil
       mouse-yank-at-point t
       read-buffer-completion-ignore-case t
       read-file-name-completion-ignore-case t
       save-interprogram-paste-before-kill t
       scroll-preserve-screen-position 'always
       set-mark-command-repeat-pop t
       tooltip-delay 1.5
       truncate-lines nil
       visible-bell t
       kill-do-not-save-duplicates t
       echo-keystrokes 0.02
       truncate-partial-width-windows nil)

      ;; Make native compilation silent and prune its cache.
      (when (native-comp-available-p)
        (setq native-comp-async-report-warnings-errors 'silent) ; Emacs 28 with native compilation
        (setq native-compile-prune-cache t)) ; Emacs 29

      (setq backup-directory-alist `(("." . ,(concat user-emacs-directory "backups"))))
      ;; (setq auto-save-file-name-transforms
      ;;     `((".*" ,(concat user-emacs-directory "backups/") t)))

      (setq x-selection-timeout 100
            select-enable-clipboard t
            x-select-enable-clipboard-manager nil)

      ;; EMACS C
      (setq auto-hscroll-mode 'current-line
            auto-save-interval 64
            auto-save-timeout 2
            enable-recursive-minibuffers t
            history-delete-duplicates t
            history-length 200)

      (setq backup-by-copying t
            delete-old-versions t
            version-control t
            compilation-scroll-output 'first-error
            create-lockfiles nil
            redisplay-dont-pause t
            confirm-kill-emacs 'y-or-n-p
            undo-limit 800000
            max-lisp-eval-depth 10000
            x-stretch-cursor t)

      (when *is-a-mac*
        (setq ns-alternate-modifier 'alt
              ns-command-modifier 'meta
              ns-function-modifier 'hyper
              ns-right-alternate-modifier 'none)
        ;; Settings for the Emacs Mac-port
        (setq mac-command-modifier 'meta
              mac-option-modifier 'alt
              mac-pass-command-to-system nil))

      ;; Select treesitter langs
      (setq treesit-language-source-alist
            '((ruby "https://github.com/tree-sitter/tree-sitter-ruby")))

      ;; enable features
      (mapc (lambda (x) (put x 'disabled nil))
            '(erase-buffer upcase-region downcase-region dired-find-alternate-file narrow-to-region)))

    (use-package sudo-edit)

    (use-package helpful)

    (use-package savehist
      :ensure nil
      :config
      (setq savehist-additional-variables '(search-ring regexp-search-ring))
      (setq savehist-autosave-interval 60)
      (savehist-mode +1))

    (use-package recentf
      :ensure nil
      :config
      (setq recentf-max-saved-items 600
            recentf-exclude '("COMMIT_MSG" "COMMIT_EDITMSG" "github.*txt$"
                              "[0-9a-f]\\{32\\}-[0-9a-f]\\{32\\}\\.org"
                              ".*png$" ".*cache$"))
      (recentf-mode 1))

    (use-package buffer-move)

    (use-package winner
      :ensure nil
      :bind (("M-N" . winner-redo)
             ("M-P" . winner-undo))
      :config
      (remove-hook 'minibuffer-setup-hook 'winner-save-unconditionally)
      (winner-mode 1))

    (use-package uniquify
      :ensure nil
      :config
      (setq uniquify-buffer-name-style 'forward
            uniquify-separator "/"
            uniquify-ignore-buffers-re "^\\*"))

    (use-package display-line-numbers
      :ensure nil
      :hook prog-mode
      :config
      (setq-default
       display-line-numbers-width 3
       display-line-numbers 'relative
       display-line-numbers-current-absolute t))

    (use-package display-fill-column-indicator
      :ensure nil
      :hook prog-mode
      :config
      (setq-default
       indicate-buffer-boundaries 'left
       display-fill-column-indicator-character ?\u254e))

    (use-package dired
      :ensure nil
      :config
      (when *is-a-mac* (setq insert-directory-program "gls"))

      (setq dired-listing-switches "-laGh1v"
            list-directory-brief-switches "-CFh"
            list-directory-verbose-switches "-lhG"
            dired-recursive-deletes 'always
            dired-recursive-copies 'always
            dired-dwim-target t))

    (use-package isearch
      :ensure nil
      :config
      (setq isearch-repeat-on-direction-change t
            isearch-wrap-pause nil
            isearch-lazy-count t
            lazy-count-prefix-format "[%s of %s] "
            isearch-forward-thing-at-point '(region url email symbol sexp)
            isearch-allow-prefix t))

    (use-package multiple-cursors
      :bind (("C->" . mc/mark-next-like-this)
             ("C-<" . mc/mark-previous-like-this)
             ("C-c C-<" . mc/mark-all-like-this)))

    (use-package avy
      :bind ("C-j" . avy-goto-char-timer)
      :config
      (setq avy-timeout-seconds 0.25))

    (use-package ace-window
      :bind ("M-o" . ace-window)
      :config
      (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))

    (use-package ibuffer
      :ensure nil
      :bind (("C-x C-b" . ibuffer)))

    (use-package expand-region
      :bind ("C-=" . er/expand-region))

    (use-package which-key
      :demand t
      :config
      (which-key-mode))

    (use-package crux
      :bind (
             ("C-o" . crux-smart-open-line)
             ("C-S-o" . crux-smart-open-line-above)
             ("C-k" . crux-smart-kill-line)
             ("C-<backspace>". crux-kill-line-backwards)
             ("M-<down>" . crux-duplicate-current-line-or-region)
             ("M-S-<down>" . crux-duplicate-and-comment-current-line-or-region)
             ("C-c K" . crux-kill-other-buffers)
             ("M-j" . crux-top-join-line)

             ([remap move-beginning-of-line] . crux-move-beginning-of-line)
             ([remap kill-whole-line] . crux-kill-whole-line)))

    (use-package rainbow-delimiters
      :hook prog-mode
      ;; :diminish rainbow-mode
      )

    ;; Smartparens
    ;; (require 'smartparens-config)
    ;; (setq show-paren-delay 0)
    ;; (setq sp-highlight-pair-overlay nil)
    ;; (add-hook 'prog-mode-hook #'smartparens-mode)
    ;; (add-hook 'text-mode-hook #'smartparens-mode)

    (provide 'init-defaults)
    ;;; init-defaults.el ends here
#+end_src

** Themes

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-themes.el
  ;;; init-themes.el --- Theme Config ;; -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:

  (use-package modus-themes)
  (use-package base16-theme)

  ;;(load-theme 'base16-ashes t)
  (load-theme 'modus-vivendi t)

  (set-face-attribute 'default nil :font "Iosevka" :height 130)

  (provide 'init-themes)
  ;;; init-themes.el ends here
#+end_src

** Projectile

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-projectile.el
  ;;; init-projectile.el --- Projectile Packages ;; -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:

  (use-package projectile
    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map))
    :config
    (setq projectile-per-project-compilation-buffer t
          projectile-mode-line-function '(lambda ()
                                           (format " Proj[%s]"
                                                   (projectile-project-name))))
    :init
    (projectile-mode +1))

  (provide 'init-projectile)
  ;;; init-projectile.el ends here
#+end_src

** Git

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-git.el
  ;;; init-git.el --- Git Configuration ;; -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:

  (use-package magit
    :config
    (setq magit-completing-read-function #'magit-ido-completing-read))

  (provide 'init-git)
  ;;; init-git.el ends here
#+end_src

** Org

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-org.el
  ;;; init-org.el --- Org Configuration ;; -*- lexical-binding: t; -*-

  ;;; Commentary:

  ;;; Code:

  (require 'org)
  (setq org-completion-use-ido t
        org-outline-path-complete-in-steps nil)

  (use-package org-pomodoro)

  (provide 'init-org)
  ;;; init-org.el ends here
#+end_src

** Languages

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-langs.el
  ;;; init-langs.el --- Programming Languages Configuration ;; -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:
  (add-to-list 'load-path (expand-file-name "lisp/languages" user-emacs-directory))

  (require 'init-c-cpp)
  (require 'init-ruby)
  (require 'init-dart)
  (require 'init-data)
  (require 'init-lisp)
  (require 'init-sql)
  (require 'init-markdown)

  (use-package eglot
    :ensure nil
    :init
    (setq eglot-stay-out-of '(flymake)))

  (use-package flymake
    :ensure nil
    :hook (prog-mode . flymake-mode))

  (use-package eldoc
    :demand t
    :ensure nil
    :init
    (global-eldoc-mode +1))

  (provide 'init-langs)
  ;;; init-langs.el ends here
#+end_src

*** C/C++

#+begin_src elisp :tangle ~/.emacs.d/lisp/languages/init-c-cpp.el
  ;;; init-c-cpp.el --- C-Cpp Configuration ;; -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:

  ;; C++
  (use-package modern-cpp-font-lock
    :hook (c++-mode . modern-c++-font-lock-mode))

  (provide 'init-c-cpp)
  ;;; init-c-cpp.el ends here
#+end_src

*** Ruby

#+begin_src elisp :tangle ~/.emacs.d/lisp/languages/init-ruby.el
  ;;; init-ruby.el --- Ruby Configuration ;; -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:

  ;; (use-package ruby-ts-mode
  ;;   :ensure nil
  ;;   :hook (ruby-ts-mode . subword-mode)
  ;;   :mode "\\.rb\\'"
  ;;   :mode "Rakefile\\'"
  ;;   :mode "Gemfile\\'"
  ;;   :mode "\\.ru\\'"
  ;;   :custom
  ;;   (ruby-indent-level 2)
  ;;   (ruby-indent-tabs-mode nil))

  (use-package inf-ruby
    :hook ((ruby-mode    . inf-ruby-minor-mode)
           (ruby-ts-mode . inf-ruby-minor-mode)))

  (when *rvm-installed*
    (use-package rvm
      :demand t
      :config
      (message "CHIAMATO MI AI")
      (advice-add 'inf-ruby-console-auto :before #'rvm-activate-corresponding-ruby)))

  (use-package robe
    :hook ((ruby-mode    . robe-mode)
           (ruby-ts-mode . robe-mode))
    :config
    ;; (eval-after-load 'company
    ;;   '(push 'company-robe company-backends))
    )

  (use-package bundler
    :after ruby-mode)

  (use-package rspec-mode
    ;; :diminish rspec-mode
    :hook ruby-mode
    :config
    (setq rspec-use-rake-when-possible nil))

  (use-package yari
    :after ruby-mode
    :bind (:map ruby-mode-map
                ("C-c k" . yari)))

  (use-package rubocop
    :hook ((ruby-mode    . rubocop-mode)
           (ruby-ts-mode . rubocop-mode)))

  (provide 'init-ruby)
  ;;; init-ruby.el ends here
#+end_src

*** Dart

#+begin_src elisp :tangle ~/.emacs.d/lisp/languages/init-dart.el
  ;;; init-dart.el --- Dart Configuration ;; -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:

  (use-package dart-mode
    :mode "\\.dart\\'"
    :bind (:map dart-mode-map
                ("C-c C-o" . dart-server-format)
                ("C-M-x"   . flutter-run-or-hot-reload)))

  (use-package dart-server
    :after dart-mode
    :hook (dart-server . flycheck-mode))

  (use-package flutter
    :after dart-mode
    :config
    (setq flutter-sdk-path "~/FlutterDev/flutter/"))

  (provide 'init-dart)
  ;;; init-dart.el ends here
#+end_src

*** Data

#+begin_src elisp :tangle ~/.emacs.d/lisp/languages/init-data.el
  ;;; init-data.el --- Data Configuration ;; -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:

  (use-package csv-mode
    :hook (csv-mode . csv-guess-set-separator))

  (provide 'init-data)
  ;;; init-data.el ends here
#+end_src

*** Lisp

#+begin_src elisp :tangle ~/.emacs.d/lisp/languages/init-lisp.el
  ;;; init-lisp.el --- Lisp Configuration ;; -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:


  ;; Paredit Cheat Sheet

  ;; Navigation
  ;; Go to the opening parenthesis: M-C-u (paredit-backward-up)
  ;; Go to the closing parenthesis: M-C-d (paredit-forward-down)

  ;; Parentheses and Quotes Manipulation
  ;; Insert balanced parentheses: M-( (paredit-wrap-round)
  ;; Slurp a parenthesis forward: C-) (paredit-forward-slurp-sexp)
  ;; Slurp a parenthesis backward: C-( (paredit-backward-slurp-sexp)
  ;; Barf a parenthesis forward: C-} (paredit-forward-barf-sexp)
  ;; Barf a parenthesis backward: C-{ (paredit-backward-barf-sexp)
  ;; Surround with quotes: M-\" (paredit-meta-doublequote)

  ;; Deletion and Killing
  ;; Delete a character forward: C-d (paredit-forward-delete)
  ;; Delete a character backward: DEL (paredit-backward-delete)
  ;; Kill a line (keeping parentheses balanced): C-k (paredit-kill)

  ;; Splitting and Joining
  ;; Split an s-expression: M-S (paredit-split-sexp)
  ;; Join two s-expressions: M-J (paredit-join-sexps)
  (use-package paredit
    :hook ((emacs-lisp-mode lisp-mode lisp-interaction-mode scheme-mode) . paredit-mode))

  (use-package elisp-slime-nav
    :hook ((emacs-lisp-mode . turn-on-elisp-slime-nav-mode)
           (ielm-mode       . turn-on-elisp-slime-nav-mode)))

  (use-package slime
    :commands slime
    :config
    ;; (setq inferior-lisp-program "/path/to/your/lisp-implementation") ; es. sbcl, clisp, ecc.
    (setq slime-contribs '(slime-fancy slime-company)))

  (use-package slime-company
    :after (slime company)
    :config
    (setq slime-company-completion 'fuzzy
          slime-company-after-completion 'slime-company-just-one-space))

  (provide 'init-lisp)
  ;;; init-lisp.el ends here
#+end_src

*** Sql

#+begin_src elisp :tangle ~/.emacs.d/lisp/languages/init-sql.el
  ;;; init-sql.el --- Sql Configuration ;; -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:

  (use-package sqlformat
    :bind (:map sql-mode-map
                ("C-c C-f" . sqlformat))
    :hook (sql-mode . sqlformat-on-save-mode)
    :config
    (setq sqlformat-command 'pgformatter
          sqlformat-args '("-s2" "-g")))

  (use-package sqlup-mode
    :bind (:map sql-mode-map
                ("C-c u" . sqlup-capitalize-keywords-in-region))
    :hook ((sql-mode . sqlup-mode)
           ;; Capitalize keywords in an interactive session (e.g. psql)
           (sql-interactive-mode . sqlup-mode))
    :config
    (add-to-list 'sqlup-blacklist "name"))

  (provide 'init-sql)
  ;;; init-sql.el ends here
#+end_src

*** Markdown

#+begin_src elisp :tangle ~/.emacs.d/lisp/languages/init-markdown.el
  ;;; init-markdown.el --- Markdown Configuration ;; -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:

  (use-package markdown-mode
    :magic "\\.md\\'")

  (provide 'init-markdown)
  ;;; init-markdown.el ends here
#+end_src


** Miscellaneous

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-misc.el
  ;;; init-misc.el --- Miscellaneous Packages Configuration ;; -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:
  (add-to-list 'load-path (expand-file-name "lisp/miscellaneous" user-emacs-directory))

  (require 'init-yasnippet)
  (require 'init-docker)
  (require 'init-gnus)

  (provide 'init-misc)
  ;;; init-misc.el ends here
#+end_src

*** Yasnippet

#+begin_src elisp :tangle ~/.emacs.d/lisp/miscellaneous/init-yasnippet.el
    ;;; init-yasnippet.el --- Yasnippet snippets ;; -*- lexical-binding: t; -*-
    ;;; Commentary:
    ;;; Code:

    (use-package yasnippet
      :hook (prog-mode . yas-minor-mode)
      :config
      (setq yas-snippet-dirs (list (concat user-emacs-directory "snippets")))
      (push '(company-semantic :with company-yasnippet) company-backends)
      (yas-reload-all))

    (use-package yasnippet-snippets
      :after yasnippet)

    (provide 'init-yasnippet)
    ;;; init-yasnippet.el ends here
#+end_src

*** Docker

#+begin_src elisp :tangle ~/.emacs.d/lisp/miscellaneous/init-docker.el
  ;;; init-docker.el --- Better Emacs Docker ;; -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:

  (use-package docker)
  (use-package docker-compose-mode)
  (use-package dockerfile-mode
    :config
    (put 'dockerfile-image-name 'safe-local-variable #'stringp))

  (provide 'init-docker)
  ;;; init-docker.el ends here
#+end_src

*** Gnus

#+begin_src elisp :tangle ~/.emacs.d/lisp/miscellaneous/init-gnus.el
  ;;; init-gnus.el --- Better Emacs Gnus ;; -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:

  (use-package gnus
    :ensure nil
    :bind (:map gnus-group-mode-map
                ("o" . my-gnus-group-list-subscribed-groups))
    :hook ((message-mode . (lambda ()
                             (flyspell-mode t))))
    :config
    (setq gnus-article-sort-functions
          '((not gnus-article-sort-by-date)
            (not gnus-article-sort-by-number))
          ;; Patch article
          gnus-article-patch-conditions
          '( "^@@ -[0-9]+,[0-9]+ \\+[0-9]+,[0-9]+ @@" )
          ;; Specify the send mail function
          send-mail-function         'smtpmail-send-it
          message-send-mail-function 'smtpmail-send-it)

    (defun my-gnus-group-list-subscribed-groups ()
      "List all subscribed groups with or without un-read messages"
      (interactive)
      (gnus-group-list-all-groups 5)))

  (provide 'init-gnus)
  ;;; init-gnus.el ends here
#+end_src
